package com.cg.fda.web;

import static org.junit.jupiter.api.Assertions.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.BDDMockito;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.validation.BindingResult;

import com.cg.fda.domain.DeliveryBoy;
import com.cg.fda.exception.DeliveryBoyException;
import com.cg.fda.service.DeliveryBoyService;
import com.cg.fda.service.MapValidationErrorService;
import com.fasterxml.jackson.databind.ObjectMapper;

@ExtendWith(SpringExtension.class)
@WebMvcTest(controllers = DeliveryBoyController.class)
@AutoConfigureMockMvc
class DeliveryBoyControllerTest {

	@Autowired
	MockMvc mockMvc;
	
	@MockBean
	DeliveryBoyService deliveryBoyService;
	
	@MockBean
	MapValidationErrorService mapValidationErrorService;
	
	@InjectMocks
	DeliveryBoyController deliveryBoyController;
	
	/**
	 * Testing the createDeliveryBoy method of the rest controller by giving the valid data of patient.
	 * @throws Exception
	 */
	@Test
	void test1_CreateNewDeliveryBoy() throws Exception{
		BindingResult result = null;
		BDDMockito.given(mapValidationErrorService.mapValidationError(result)).willReturn(null);
		DeliveryBoy deliveryBoy = new DeliveryBoy("Db02","Aarush","89123456789","db02@gmail.com");
		BDDMockito.given(deliveryBoyService.saveOrUpdate(Mockito.any())).willReturn(deliveryBoy);
		ObjectMapper objectMapper = new ObjectMapper();
		String inputJson = objectMapper.writeValueAsString(deliveryBoy);
		mockMvc.perform(MockMvcRequestBuilders.post("/api/delivery")
				.contentType(MediaType.APPLICATION_JSON_VALUE)
				.content(inputJson))
				.andExpect(status().isCreated())
				.andExpect(jsonPath("$").isMap())
				.andExpect(jsonPath("deliveryBoyName").value("Aarush"))
				.andExpect(jsonPath("deliveryBoyIdentifier").value("Db02"))
				.andExpect(jsonPath("deliveryBoyPhoneNumber").value("89123456789"))
				.andExpect(jsonPath("deliveryBoyEmail").value("db02@gmail.com"));
	}
	
	/**
	 * Testing the createDeliveryBoy method of the rest controller by giving the invalid data of patient.
	 * @throws Exception
	 */
	@Test
	void test2_CreateNewDeliveryBoy() throws Exception{
		BindingResult result = null;
		BDDMockito.given(mapValidationErrorService.mapValidationError(result)).willReturn(null);
		DeliveryBoy deliveryBoy = new DeliveryBoy("Db2","Aarush","89123456789","db02@gmail.com");
		BDDMockito.given(deliveryBoyService.saveOrUpdate(Mockito.any())).willThrow(new DeliveryBoyException());
		mockMvc.perform(MockMvcRequestBuilders.post("/api/delivery"))
		.andExpect(status().isBadRequest());
	}

}
